#!/bin/zsh
isadmin() { id -G $1 | grep -q -w 80 ; }
semver() { printf "%03d%03d%03d%03d" $(echo "$1" | tr '.' ' '); }
waitconfirm() {
  if read -q "choice?Continue [press y/n]? "; then
    echo "Continuing..."
  else
    exit 0
  fi
}

bash_error_handler() {
    # Iterate over the stack trace to find the original error location
    echo "Encountered an error. Stacktrace:"
    for (( i=${#BASH_SOURCE[@]}-1; i >= 0; i-- )); do
        if [[ $i == 0 ]]; then
            args=("$@")
            file="${args[0]}"
            lineno="E" # the executed command
            content_on_line="${args[*]:2}"
        else
            file="${BASH_SOURCE[$i]}"
            lineno="${BASH_LINENO[$((i-1))]}"
            content_on_line=$(awk "NR == $lineno" "$file")
        fi
        trimmed_line=$(echo "$content_on_line" | sed 's/^[[:space:]]*//;s/[[:space:]]*$//')
        if [[ ${#trimmed_line} -gt 50 ]]; then
            limited_line="${trimmed_line:0:47}..."
        else
            limited_line="$trimmed_line"
        fi
        padded_line=$(printf "%-50s" "$limited_line")
        echo -e "\t$padded_line  on line $lineno\t in file $file"
    done
}

zsh_error_handler() {
    # Iterate over the stack trace to find the original error location
    echo "Encountered an error. Stacktrace:"
    for (( i=${#funcfiletrace[@]}; i >= 1; i-- )); do
        fileandlineno=${funcfiletrace[i]}
        file=${fileandlineno%%:*}  # Get the first part before the first ':'
        lineno=${fileandlineno##*:}  # Get the last part after the last ':'
        content_on_line="$(awk "NR == $lineno" "$file")"
        trimmed_line=$(echo "$content_on_line" | sed 's/^[[:space:]]*//;s/[[:space:]]*$//')
        if [[ ${#trimmed_line} -gt 50 ]]; then
            limited_line="${trimmed_line:0:47}..."
        else
            limited_line="$trimmed_line"
        fi
        padded_line=$(printf "%-50s" "$limited_line")
        echo "\t$padded_line  on line $lineno\t in file $file."
    done
}

set_error_handler() {
    if [[ $SHELL == "/bin/bash" ]]; then
        set -eE -o functrace
        trap 'bash_error_handler ${BASH_SOURCE} ${BASH_COMMAND} ${BASH_ARGV[@]}' ERR
    elif [[ $SHELL == "/bin/zsh" ]]; then
        set -e
        trap 'zsh_error_handler' ERR
    else
        echo "No error handler for shell $SHELL"
    fi
}

# First argument = dir, Second argument = location and name (.tar.xz)
compressdir() {
    if [ $# -eq 1 ]; then tar --xz -cf "$1.tar.xz" "$1"; fi
    if [ $# -eq 2 ]; then tar --xz -cf "$2.tar.xz" "$1"; fi
}

decompressdir() {
    bname=$(basename $1)
    fname=${bname%.tar.xz}
    tar --xz -xvf "$1"
    if [ $# -eq 2 ]; then mv "$fname" "$2";  fi
}

# Create a data URL from a file
dataurl () {
    local mimeType=$(file -b --mime-type "$1");
    if [[ $mimeType == text/* ]]; then
        mimeType="${mimeType};charset=utf-8";
    fi
    echo "data:${mimeType};base64,$(openssl base64 -in "$1" | tr -d '\n')";
}

# eg. utf8_encode ZoÃ«
utf8_encode () {
    printf "\\\x%s" $(printf "$@" | xxd -p -c1 -u);
    if [ -t 1 ]; then
        echo ""
    fi
}

# eg. utf8_decode \\x5A\\x6F\\xC3\\xAB
utf8_decode() {
    perl -e "binmode(STDOUT, ':utf8'); print \"$@\"";
    if [ -t 1 ]; then
        echo ""; # newline
    fi;
}


# ===========
# Vim DirDiff
# ===========
vimdirdiff()
{
    # Shell-escape each path:
    DIR1=$(printf '%q' "$1"); shift
    DIR2=$(printf '%q' "$1"); shift
    \vim $@ -c "DirDiff $DIR1 $DIR2"
}

nvimdirdiff()
{
    # Shell-escape each path:
    DIR1=$(printf '%q' "$1"); shift
    DIR2=$(printf '%q' "$1"); shift
    nvim $@ -c "DirDiff $DIR1 $DIR2"
}

nvimdiff()
{
    # Shell-escape each path:
    DIR1=$(printf '%q' "$1"); shift
    DIR2=$(printf '%q' "$1"); shift
    nvim $@ -d $DIR1 $DIR2
}


filtererrors() {
  local regex='\b(?:abort(?:ed|ing|s)?|anomal(?:y|ies)|block(?:ed|ing|s)?|breach(?:ed|ing|es)?|break(?:s|ing|age)?|brok(?:e|en)|bugs?|cannot|code 1|compromis(?:e|ed|ing|es)?|conflict(?:ed|ing|s)?|corrupt(?:ed|ing|s|ion|ions)?|crash(?:ed|ing|es)?|critical|defect(?:ed|ing|s|ive)?|den(?:y|ied|ies|ial|ials)?|deprecat(?:e|ed|ing|es|ion|ions)?|detect(?:ed|ing|s)?|discrepanc(?:y|ies)|err(?:or|ors)?|exceed(?:ed|ing|s)?|except(?:ion|ions)?|expir(?:e|ed|es|ing)|fail(?:ed|ing|s|ure|ures)?|fatal|fault(?:ed|ing|s|y)?|forbidden|hang(?:ed|ing|s)?|illegal|incorrect|inconsistent|invalid|issue(?:s)?|kill(?:ed|ing|s)?|leak(?:ed|ing|s)?|limit(?:ed|ing|s)?|loss(?:es)?|mismatch(?:ed|ing|es)?|miss(?:ed|ing|es)?|mistake(?:n|s)?|no\s+route|not\s+found|not\s+known|not\s+permitted|overflow(?:ed|ing|s)?|overheat(?:ed|ing|s)?|panic(?:s|ked|king)?|problem(?:s|atic)?|race\s+condition|refus(?:e|ed|ing|es|al)?|reject(?:ed|ing|s|ion|ions)?|segfault(?:ed|ing|s)?|shutdown(?:s)?|terminat(?:e|ed|ing|es|ion|ions)?|threat(?:en|ened|ening|s)?|timedout(?:s)?|timed out|unavailable|unauthori[sz]ed|undefined|unexpected|unhandled|unknown|unreachable|unrecoverable|unresponsive|violat(?:e|ed|ing|es|ion|ions)?|(?:server|system|connection|service|network|database|application|link|interface|cluster)\s+down|(?:disk|memory|buffer|queue|log|cache|storage|heap|stack|table)\s+full|(?:connection|read|write|request|operation|session|login|execution|gateway|handshake)\s+timeout)\b'

  # Case: Input is an argument.
  if [ -t 0 ]; then
    # One argument: filename
    if [ "$#" -eq 1 ]; then
      local surroundno=1
    elif [ "$#" -eq 2 ]; then
      # Two arguments: filename and context lines
      local surroundno="$2"
    else
      echo "Usage: filtererrors file [context_lines]" >&2
      echo "Alternative Usage: cat file | filtererrors [context_lines]" >&2
      return 1
    fi
    if command -v rg > /dev/null 2>&1; then
      rg -n --colors 'column:fg:blue' \
      --colors 'column:bg:yellow' \
      --colors 'column:style:bold' \
      --colors 'match:none' \
      --colors 'match:bg:0x33,0x66,0xFF' \
      --colors 'match:fg:white' \
      --colors 'match:style:bold' \
      --column \
      -C "$surroundno" "$regex" "$1"
    else
      grep -Ei -C "$surroundno" -n "$regex" "$1"
    fi
  # Case: Input is piped in.
  else
    if [ "$#" -eq 0 ]; then
      local surroundno=1
    elif [ "$#" -eq 1 ]; then
      local surroundno="$1"
    else
      echo "Usage: cat file | filtererrors [context_lines]" >&2
      return 1
    fi
    if command -v rg > /dev/null 2>&1; then
      rg -n --colors 'column:fg:blue' \
      --colors 'column:bg:yellow' \
      --colors 'column:style:bold' \
      --colors 'match:none' \
      --colors 'match:bg:0x33,0x66,0xFF' \
      --colors 'match:fg:white' \
      --colors 'match:style:bold' \
      --column \
      -C "$surroundno" "$regex"
    else
      grep -n -Ei -C "$surroundno" "$regex"
    fi
  fi
}

# Darwin specific
assure_userlevel_zsh() {
    if [[ "$(dscl . -read ~/ UserShell)" == */bin/bash ]]; then
        echo "Your current user shell is /bin/bash. Let's change this to zsh."
        echo "This script will execute: chsh -s /bin/zsh"
        waitconfirm
        chsh -s /bin/zsh
    fi
}

check_not_rosetta() {
    if [[ "$(uname -m)" == "arm64" && "$(sysctl -n sysctl.proc_translated)" != 0 ]]; then
        echo "It seems you are running this script with Rosetta enabled."
        echo "Make sure that this terminal or session has Rosetta turned off."
        echo "For example: Right-Click Terminal > Get Info > Uncheck Open using Rosetta"
        exit 1
    fi
}

